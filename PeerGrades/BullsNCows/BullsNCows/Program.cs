using System;
using System.Collections.Generic;
using System.Linq;

namespace BullsNCows
{
    class Program
    {
        /// <summary>
        /// 1. Creating result array in which we will store digits of the generated number.
        /// 2. Creating HashSet, containing all digits from 0 to 9 (including bounds).
        /// 3. Generating the first digit of the number outside of the loop, because if should be any digit, except 0.
        /// 4. Running the loop for other n-1 times.
        /// 5. Every iteration we are generating the digit from 0 to 9, until we get the digit,
        /// which is contained in the hashset from the 2 step. Then we delete it from the hashset to prevent digits
        /// from repeating in the generated number. Then add it to the result array from step 1.
        /// </summary>
        /// <param name="n">Number of digits that the generated number should contain.
        /// (it should be more than 1 and less than 10, because the number shouldn't contain repeating digits).</param>
        /// <returns>Array of digits of the generated number, length of which equals to the "n" parameter.</returns>
        private static long[] GenerateNumber(long n = 4)
        {
            long[] result = new long[n];
            Random t = new Random();
            var unusedDigits = new HashSet<long>(new long[]{0,1,2,3,4,5,6,7,8,9});
            result[0] = t.Next(1, 10);
            unusedDigits.Remove(result[0]);
            for (int i = 1; i < n; i++)
            {
                while (true)
                {
                    long tmpValue = t.Next(0, 10);
                    if (unusedDigits.Contains(tmpValue))
                    {
                        unusedDigits.Remove(tmpValue);
                        result[i] = tmpValue;
                        break;
                    }
                }
            }

            return result;
        }
        /// <summary>
        /// Method CountDigits.
        /// 1. Creating 2 counters:
        ///    - number of digits of the userNumber, that are on the same place as in the number,
        /// generated by the program.
        ///    - number of digits of the userNumber, that are not on the same place as in the number,
        /// generated by the program, but are contained in it on other places.
        /// 2. Running the loop for the length of the number array times.
        /// 3. Every iteration we are checking if the i-digit in the number is equal to the i-digit in the userNumber,
        /// we add 1 to the 1st counter, else we check if the number array contains this i-digit,
        /// and add 1 to the 2nd counter, if it is true.
        /// </summary>
        /// <param name="number">Array with digits of the number, generated by the program,
        /// which the user should guess.</param>
        /// <param name="userNumber">Array with digits of the number, given by the user,
        /// when he is in the process of guessing the number.</param>
        /// <returns>Array of 2 counters, on the first place we put the 2nd counter from step 1, and then the 1st counter from step 1.</returns>
        private static long[] CountDigits(long[] number, long[] userNumber)
        {
            long totalMessed = 0, totalReady = 0;
            for (int i = 0; i < userNumber.Length; i++)
            {
                if (userNumber[i] == number[i])
                {
                    totalReady += 1;
                }
                else if (number.Contains(userNumber[i]))
                {
                    totalMessed += 1;
                }
            }
            return new long[] {totalMessed, totalReady};
        }
        /// <summary>
        /// Method DigitsNumberOption.
        /// It returns the number of digits, that the user typed in console.
        /// Handles all exceptions, that can be connected with wrong input.
        /// </summary>
        /// <returns>Number of digits, from which the number will be generated.</returns>
        private static long DigitsNumberOption()
        {
            long digitsNumber = 0;
            string digitsNumberString = "";
            while (true)
            {
                Console.WriteLine("Input the number of digits (1 to 10):");
                digitsNumberString = Console.ReadLine();
                if (long.TryParse(digitsNumberString, out digitsNumber))
                {
                    if (digitsNumber <= 10 && digitsNumber >= 1)
                    {
                        break;
                    }
                    else
                    {
                        Console.WriteLine($"Incorrect Number. Number of digits should be from 1 to 10.");
                    }
                }
                else
                {
                    Console.WriteLine("Incorrect Number. (not a number)");
                }
            }
            return digitsNumber;
        }
        /// <summary>
        /// Method EndGameOption.
        /// It prompts the restart of the game after game ending. Handles user input.
        /// </summary>
        /// <returns>true, if the user wants to play again, if he wants to exit - false.</returns>
        private static bool EndGameOption()
        {
            Console.WriteLine("Would you like to play again?\nType \"Y\" - to play again\nOther - exit");
            string command = Console.ReadLine();
            if (command != "Y" && command != "y")
            {
                Console.WriteLine("Thank you for the game, see ya.");
                return false;
            }

            return true;
        }
        /// <summary>
        /// Method ProcessGame.
        /// Gets the number from user, until it is in the right format, handles all exceptions, connected with input.
        /// Checks the number and shows number of messed and right digits in the user number.
        /// </summary>
        /// <param name="digitsNumber">Number of digits in the generated number.</param>
        /// <param name="generatedNumberArray">Array with digits of the generated number.</param>
        /// <returns>true, if the the user guessed the number, false if the number was not guessed by user.</returns>
        private static bool ProcessGame(long digitsNumber, long[] generatedNumberArray)
        {
            string userNumberString = "";
            ulong userNumber = 0;
            long[] userNumberArray = new long[digitsNumber], tempData = new long[2];
            Console.WriteLine($"Input your number ({digitsNumber}-digit): ");
            userNumberString = Console.ReadLine();
            if (ulong.TryParse(userNumberString, out userNumber))
            {
                if (userNumberString.Length == digitsNumber)
                {
                    for (int i = 0; i < digitsNumber; i++)
                    {
                        userNumberArray[i] = userNumberString[i] - 48;
                    }
                    tempData = CountDigits(generatedNumberArray, userNumberArray);
                    if (tempData[1] == digitsNumber)
                    {
                        Console.WriteLine($"Good Job! The number was {userNumberString}");
                        return true;
                    }
                    Console.WriteLine($"Number of digits, that are not on their places: {tempData[0]}\n" +
                                      $"Number of digits, that are on their places: {tempData[1]}");
                }
                else
                {
                    Console.WriteLine($"Incorrect Number. (Bad length. Should be: {digitsNumber} digit(s).)");
                }
            }
            else
            {
                Console.WriteLine("Incorrect Number. (not a number)");
            }
            return false;
        }
        /// <summary>
        /// Method Main.
        /// Realises the main logic of the program, initializes and restarts the game, if the user wants it.
        /// </summary>
        static void Main(string[] args)
        {
            Console.WriteLine("Game: Bulls And Cows.\n");
            string userNumberString = "";
            long digitsNumber, userNumber = 0;
            while (true)
            {
                digitsNumber = DigitsNumberOption();
                long[] generatedNumberArray = GenerateNumber(digitsNumber);
                Console.WriteLine($"We have generated the {digitsNumber}-digit number. Try to guess it now!");
                while (true)
                {
                    if (ProcessGame(digitsNumber, generatedNumberArray))
                    {
                        break;
                    }
                }
                if (!EndGameOption())
                {
                    break;
                }
            }
        }
    }
}